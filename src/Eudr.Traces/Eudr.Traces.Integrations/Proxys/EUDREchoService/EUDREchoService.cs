//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Eudr.Traces.Integrations.ServiceAgents.Proxys.EUDREchoService
{ 
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ec.europa.eu/tracesnt/eudr/echo")]
    public partial class EudrEchoServiceFault
    {

        private string errorMessageField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string errorMessage
        {
            get
            {
                return this.errorMessageField;
            }
            set
            {
                this.errorMessageField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ec.europa.eu/tracesnt/eudr/echo")]
    public partial class EudrEchoResponseType
    {

        private string statusField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string status
        {
            get
            {
                return this.statusField;
            }
            set
            {
                this.statusField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://ec.europa.eu/tracesnt/eudr/echo")]
    public partial class EudrEchoRequestType
    {

        private string queryField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string query
        {
            get
            {
                return this.queryField;
            }
            set
            {
                this.queryField = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace = "http://ec.europa.eu/tracesnt/eudr/echo", ConfigurationName = "EudrEchoServicePort")]
    public interface EudrEchoServicePort
    {

        [System.ServiceModel.OperationContractAttribute(Action = "http://ec.europa.eu/tracesnt/eudr/echo", ReplyAction = "*")]
        [System.ServiceModel.FaultContractAttribute(typeof(EudrEchoServiceFault), Action = "http://ec.europa.eu/tracesnt/eudr/echo", Name = "EudrEchoServiceFault")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
        System.Threading.Tasks.Task<EudrEchoResponse> testEchoAsync(EudrEchoRequest request);
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped = false)]
    public partial class EudrEchoRequest
    {

        [System.ServiceModel.MessageHeaderAttribute(Namespace = "http://ec.europa.eu/sanco/tracesnt/base/v4")]
        public string WebServiceClientId;

        [System.ServiceModel.MessageBodyMemberAttribute(Name = "EudrEchoRequest", Namespace = "http://ec.europa.eu/tracesnt/eudr/echo", Order = 0)]
        public EudrEchoRequestType EudrEchoRequest1;

        public EudrEchoRequest()
        {
        }

        public EudrEchoRequest(string WebServiceClientId, EudrEchoRequestType EudrEchoRequest1)
        {
            this.WebServiceClientId = WebServiceClientId;
            this.EudrEchoRequest1 = EudrEchoRequest1;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped = false)]
    public partial class EudrEchoResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Name = "EudrEchoResponse", Namespace = "http://ec.europa.eu/tracesnt/eudr/echo", Order = 0)]
        public EudrEchoResponseType EudrEchoResponse1;

        public EudrEchoResponse()
        {
        }

        public EudrEchoResponse(EudrEchoResponseType EudrEchoResponse1)
        {
            this.EudrEchoResponse1 = EudrEchoResponse1;
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public interface EudrEchoServicePortChannel : EudrEchoServicePort, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public partial class EudrEchoServicePortClient : System.ServiceModel.ClientBase<EudrEchoServicePort>, EudrEchoServicePort
    {

        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);

        public EudrEchoServicePortClient() :
                base(EudrEchoServicePortClient.GetDefaultBinding(), EudrEchoServicePortClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.EudrEchoServiceEndpoint.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public EudrEchoServicePortClient(EndpointConfiguration endpointConfiguration) :
                base(EudrEchoServicePortClient.GetBindingForEndpoint(endpointConfiguration), EudrEchoServicePortClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public EudrEchoServicePortClient(EndpointConfiguration endpointConfiguration, string remoteAddress) :
                base(EudrEchoServicePortClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public EudrEchoServicePortClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) :
                base(EudrEchoServicePortClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public EudrEchoServicePortClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
                base(binding, remoteAddress)
        {
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<EudrEchoResponse> EudrEchoServicePort.testEchoAsync(EudrEchoRequest request)
        {
            return base.Channel.testEchoAsync(request);
        }

        public System.Threading.Tasks.Task<EudrEchoResponse> testEchoAsync(string WebServiceClientId, EudrEchoRequestType EudrEchoRequest1)
        {
            EudrEchoRequest inValue = new EudrEchoRequest();
            inValue.WebServiceClientId = WebServiceClientId;
            inValue.EudrEchoRequest1 = EudrEchoRequest1;
            return ((EudrEchoServicePort)(this)).testEchoAsync(inValue);
        }

        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }

    #if !NET6_0_OR_GREATER
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
    #endif

        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.EudrEchoServiceEndpoint))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }

        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.EudrEchoServiceEndpoint))
            {
                return new System.ServiceModel.EndpointAddress("https://acceptance.eudr.webcloud.ec.europa.eu/tracesnt/ws/EudrEchoService");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }

        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return EudrEchoServicePortClient.GetBindingForEndpoint(EndpointConfiguration.EudrEchoServiceEndpoint);
        }

        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return EudrEchoServicePortClient.GetEndpointAddress(EndpointConfiguration.EudrEchoServiceEndpoint);
        }

        public enum EndpointConfiguration
        {

            EudrEchoServiceEndpoint,
        }
    }
}